{"code":"export var AuthTypeEnum;\n(function (AuthTypeEnum) {\n    AuthTypeEnum[\"ServiceHttp\"] = \"service_http\";\n    AuthTypeEnum[\"OAuth\"] = \"oauth\";\n    AuthTypeEnum[\"None\"] = \"none\";\n})(AuthTypeEnum || (AuthTypeEnum = {}));\nexport var AuthorizationTypeEnum;\n(function (AuthorizationTypeEnum) {\n    AuthorizationTypeEnum[\"Bearer\"] = \"bearer\";\n    AuthorizationTypeEnum[\"Basic\"] = \"basic\";\n    AuthorizationTypeEnum[\"Custom\"] = \"custom\";\n})(AuthorizationTypeEnum || (AuthorizationTypeEnum = {}));\nexport var TokenExchangeMethodEnum;\n(function (TokenExchangeMethodEnum) {\n    TokenExchangeMethodEnum[\"DefaultPost\"] = \"default_post\";\n    TokenExchangeMethodEnum[\"BasicAuthHeader\"] = \"basic_auth_header\";\n})(TokenExchangeMethodEnum || (TokenExchangeMethodEnum = {}));\n//# sourceMappingURL=agents.js.map","references":["/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/src/types/runs.ts","/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/src/schemas.ts","/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/src/types/assistants.ts"],"map":"{\"version\":3,\"file\":\"agents.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/types/agents.ts\"],\"names\":[],\"mappings\":\"AA0RA,MAAM,CAAN,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,4CAA4B,CAAA;IAC5B,+BAAe,CAAA;IACf,6BAAa,CAAA;AACf,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;AAED,MAAM,CAAN,IAAY,qBAIX;AAJD,WAAY,qBAAqB;IAC/B,0CAAiB,CAAA;IACjB,wCAAe,CAAA;IACf,0CAAiB,CAAA;AACnB,CAAC,EAJW,qBAAqB,KAArB,qBAAqB,QAIhC;AAED,MAAM,CAAN,IAAY,uBAGX;AAHD,WAAY,uBAAuB;IACjC,uDAA4B,CAAA;IAC5B,gEAAqC,CAAA;AACvC,CAAC,EAHW,uBAAuB,KAAvB,uBAAuB,QAGlC\"}","dts":{"name":"/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/dist/types/types/agents.d.ts","writeByteOrderMark":false,"text":"import { StepTypes, ContentTypes, ToolCallTypes } from './runs';\nimport type { TAttachment, TPlugin } from 'src/schemas';\nimport type { FunctionToolCall } from './assistants';\nexport declare namespace Agents {\n    type MessageType = 'human' | 'ai' | 'generic' | 'system' | 'function' | 'tool' | 'remove';\n    type ImageDetail = 'auto' | 'low' | 'high';\n    type ReasoningContentText = {\n        type: ContentTypes.THINK;\n        think: string;\n    };\n    type MessageContentText = {\n        type: ContentTypes.TEXT;\n        text: string;\n        tool_call_ids?: string[];\n    };\n    type AgentUpdate = {\n        type: ContentTypes.AGENT_UPDATE;\n        agent_update: {\n            index: number;\n            runId: string;\n            agentId: string;\n        };\n    };\n    type MessageContentImageUrl = {\n        type: ContentTypes.IMAGE_URL;\n        image_url: string | {\n            url: string;\n            detail?: ImageDetail;\n        };\n    };\n    type MessageContentComplex = ReasoningContentText | AgentUpdate | MessageContentText | MessageContentImageUrl | (Record<string, any> & {\n        type?: ContentTypes | string;\n    }) | (Record<string, any> & {\n        type?: never;\n    });\n    type MessageContent = string | MessageContentComplex[];\n    /**\n     * A call to a tool.\n     */\n    type ToolCall = {\n        /** Type (\"tool_call\") according to Assistants Tool Call Structure */\n        type: ToolCallTypes.TOOL_CALL;\n        /** The name of the tool to be called */\n        name: string;\n        /** The arguments to the tool call */\n        args?: string | Record<string, any>;\n        /** If provided, an identifier associated with the tool call */\n        id?: string;\n        /** If provided, the output of the tool call */\n        output?: string;\n        /** Auth URL */\n        auth?: string;\n        /** Expiration time */\n        expires_at?: number;\n    };\n    type ToolEndEvent = {\n        /** The Step Id of the Tool Call */\n        id: string;\n        /** The Completed Tool Call */\n        tool_call?: ToolCall;\n        /** The content index of the tool call */\n        index: number;\n    };\n    type ToolCallContent = {\n        type: ContentTypes.TOOL_CALL;\n        tool_call?: ToolCall;\n    };\n    /**\n     * A chunk of a tool call (e.g., as part of a stream).\n     * When merging ToolCallChunks (e.g., via AIMessageChunk.__add__),\n     * all string attributes are concatenated. Chunks are only merged if their\n     * values of `index` are equal and not None.\n     *\n     * @example\n     * ```ts\n     * const leftChunks = [\n     *   {\n     *     name: \"foo\",\n     *     args: '{\"a\":',\n     *     index: 0\n     *   }\n     * ];\n     *\n     * const leftAIMessageChunk = new AIMessageChunk({\n     *   content: \"\",\n     *   tool_call_chunks: leftChunks\n     * });\n     *\n     * const rightChunks = [\n     *   {\n     *     name: undefined,\n     *     args: '1}',\n     *     index: 0\n     *   }\n     * ];\n     *\n     * const rightAIMessageChunk = new AIMessageChunk({\n     *   content: \"\",\n     *   tool_call_chunks: rightChunks\n     * });\n     *\n     * const result = leftAIMessageChunk.concat(rightAIMessageChunk);\n     * // result.tool_call_chunks is equal to:\n     * // [\n     * //   {\n     * //     name: \"foo\",\n     * //     args: '{\"a\":1}'\n     * //     index: 0\n     * //   }\n     * // ]\n     * ```\n     *\n     * @property {string} [name] - If provided, a substring of the name of the tool to be called\n     * @property {string} [args] - If provided, a JSON substring of the arguments to the tool call\n     * @property {string} [id] - If provided, a substring of an identifier for the tool call\n     * @property {number} [index] - If provided, the index of the tool call in a sequence\n     */\n    type ToolCallChunk = {\n        name?: string;\n        args?: string;\n        id?: string;\n        index?: number;\n        type?: 'tool_call_chunk';\n    };\n    /** Event names are of the format: on_[runnable_type]_(start|stream|end).\n  \n    Runnable types are one of:\n  \n    llm - used by non chat models\n    chat_model - used by chat models\n    prompt -- e.g., ChatPromptTemplate\n    tool -- LangChain tools\n    chain - most Runnables are of this type\n    Further, the events are categorized as one of:\n  \n    start - when the runnable starts\n    stream - when the runnable is streaming\n    end - when the runnable ends\n    start, stream and end are associated with slightly different data payload.\n  \n    Please see the documentation for EventData for more details. */\n    type EventName = string;\n    type RunStep = {\n        type: StepTypes;\n        id: string;\n        runId?: string;\n        index: number;\n        stepIndex?: number;\n        stepDetails: StepDetails;\n        usage: null | object;\n    };\n    /**\n     * Represents a run step delta i.e. any changed fields on a run step during\n     * streaming.\n     */\n    interface RunStepDeltaEvent {\n        /**\n         * The identifier of the run step, which can be referenced in API endpoints.\n         */\n        id: string;\n        /**\n         * The delta containing the fields that have changed on the run step.\n         */\n        delta: ToolCallDelta;\n    }\n    type StepDetails = MessageCreationDetails | ToolCallsDetails;\n    type MessageCreationDetails = {\n        type: StepTypes.MESSAGE_CREATION;\n        message_creation: {\n            message_id: string;\n        };\n    };\n    type ToolCallsDetails = {\n        type: StepTypes.TOOL_CALLS;\n        tool_calls: AgentToolCall[];\n    };\n    type ToolCallDelta = {\n        type: StepTypes.TOOL_CALLS | string;\n        tool_calls?: ToolCallChunk[];\n        auth?: string;\n        expires_at?: number;\n    };\n    type AgentToolCall = FunctionToolCall | ToolCall;\n    interface ExtendedMessageContent {\n        type?: string;\n        text?: string;\n        input?: string;\n        index?: number;\n        id?: string;\n        name?: string;\n    }\n    /**\n     * Represents a message delta i.e. any changed fields on a message during\n     * streaming.\n     */\n    interface MessageDeltaEvent {\n        /**\n         * The identifier of the message, which can be referenced in API endpoints.\n         */\n        id: string;\n        /**\n         * The delta containing the fields that have changed on the Message.\n         */\n        delta: MessageDelta;\n    }\n    /**\n     * The delta containing the fields that have changed on the Message.\n     */\n    interface MessageDelta {\n        /**\n         * The content of the message in array of text and/or images.\n         */\n        content?: Agents.MessageContentComplex[];\n    }\n    /**\n     * Represents a reasoning delta i.e. any changed fields on a message during\n     * streaming.\n     */\n    interface ReasoningDeltaEvent {\n        /**\n         * The identifier of the message, which can be referenced in API endpoints.\n         */\n        id: string;\n        /**\n         * The delta containing the fields that have changed.\n         */\n        delta: ReasoningDelta;\n    }\n    /**\n     * The reasoning delta containing the fields that have changed on the Message.\n     */\n    interface ReasoningDelta {\n        /**\n         * The content of the message in array of text and/or images.\n         */\n        content?: MessageContentComplex[];\n    }\n    type ReasoningDeltaUpdate = {\n        type: ContentTypes.THINK;\n        think: string;\n    };\n    type ContentType = ContentTypes.THINK | ContentTypes.TEXT | ContentTypes.IMAGE_URL | string;\n}\nexport type ToolCallResult = {\n    user: string;\n    toolId: string;\n    result?: unknown;\n    messageId: string;\n    partIndex?: number;\n    blockIndex?: number;\n    conversationId: string;\n    attachments?: TAttachment[];\n};\nexport declare enum AuthTypeEnum {\n    ServiceHttp = \"service_http\",\n    OAuth = \"oauth\",\n    None = \"none\"\n}\nexport declare enum AuthorizationTypeEnum {\n    Bearer = \"bearer\",\n    Basic = \"basic\",\n    Custom = \"custom\"\n}\nexport declare enum TokenExchangeMethodEnum {\n    DefaultPost = \"default_post\",\n    BasicAuthHeader = \"basic_auth_header\"\n}\nexport type Action = {\n    action_id: string;\n    type?: string;\n    settings?: Record<string, unknown>;\n    metadata: ActionMetadata;\n    version: number | string;\n} & ({\n    assistant_id: string;\n    agent_id?: never;\n} | {\n    assistant_id?: never;\n    agent_id: string;\n});\nexport type ActionMetadata = {\n    api_key?: string;\n    auth?: ActionAuth;\n    domain?: string;\n    privacy_policy_url?: string;\n    raw_spec?: string;\n    oauth_client_id?: string;\n    oauth_client_secret?: string;\n};\nexport type ActionAuth = {\n    authorization_type?: AuthorizationTypeEnum;\n    custom_auth_header?: string;\n    type?: AuthTypeEnum;\n    authorization_content_type?: string;\n    authorization_url?: string;\n    client_url?: string;\n    scope?: string;\n    token_exchange_method?: TokenExchangeMethodEnum;\n};\nexport type ActionMetadataRuntime = ActionMetadata & {\n    oauth_access_token?: string;\n    oauth_refresh_token?: string;\n    oauth_token_expires_at?: Date;\n};\nexport type MCP = {\n    mcp_id: string;\n    metadata: MCPMetadata;\n} & ({\n    assistant_id: string;\n    agent_id?: never;\n} | {\n    assistant_id?: never;\n    agent_id: string;\n});\nexport type MCPMetadata = Omit<ActionMetadata, 'auth'> & {\n    name?: string;\n    description?: string;\n    url?: string;\n    tools?: string[];\n    auth?: MCPAuth;\n    icon?: string;\n    trust?: boolean;\n};\nexport type MCPAuth = ActionAuth;\nexport type AgentToolType = {\n    tool_id: string;\n    metadata: ToolMetadata;\n} & ({\n    assistant_id: string;\n    agent_id?: never;\n} | {\n    assistant_id?: never;\n    agent_id: string;\n});\nexport type ToolMetadata = TPlugin;\n"}}
