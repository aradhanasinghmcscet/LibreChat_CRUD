{"code":"import { z } from 'zod';\nimport { TokenExchangeMethodEnum } from './types/agents';\nimport { extractEnvVariable } from './utils';\nvar BaseOptionsSchema = z.object({\n    iconPath: z.string().optional(),\n    timeout: z.number().optional(),\n    initTimeout: z.number().optional(),\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.boolean().optional(),\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.union([z.boolean(), z.string()]).optional(),\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z\n        .object({\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.string().url().optional(),\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.string().url().optional(),\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.string().optional(),\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.string().optional(),\n        /** OAuth scopes to request */\n        scope: z.string().optional(),\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.string().url().optional(),\n        /** Token exchange method */\n        token_exchange_method: z.nativeEnum(TokenExchangeMethodEnum).optional(),\n    })\n        .optional(),\n    customUserVars: z\n        .record(z.string(), z.object({\n        title: z.string(),\n        description: z.string(),\n    }))\n        .optional(),\n});\nexport var StdioOptionsSchema = BaseOptionsSchema.extend({\n    type: z.literal('stdio').optional(),\n    /**\n     * The executable to run to start the server.\n     */\n    command: z.string(),\n    /**\n     * Command line arguments to pass to the executable.\n     */\n    args: z.array(z.string()),\n    /**\n     * The environment to use when spawning the process.\n     *\n     * If not specified, the result of getDefaultEnvironment() will be used.\n     * Environment variables can be referenced using ${VAR_NAME} syntax.\n     */\n    env: z\n        .record(z.string(), z.string())\n        .optional()\n        .transform(function (env) {\n        if (!env) {\n            return env;\n        }\n        var processedEnv = {};\n        for (var _i = 0, _a = Object.entries(env); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            processedEnv[key] = extractEnvVariable(value);\n        }\n        return processedEnv;\n    }),\n    /**\n     * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n     *\n     * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n     *\n     * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n     */\n    stderr: z.any().optional(),\n});\nexport var WebSocketOptionsSchema = BaseOptionsSchema.extend({\n    type: z.literal('websocket').optional(),\n    url: z\n        .string()\n        .transform(function (val) { return extractEnvVariable(val); })\n        .pipe(z.string().url())\n        .refine(function (val) {\n        var protocol = new URL(val).protocol;\n        return protocol === 'ws:' || protocol === 'wss:';\n    }, {\n        message: 'WebSocket URL must start with ws:// or wss://',\n    }),\n});\nexport var SSEOptionsSchema = BaseOptionsSchema.extend({\n    type: z.literal('sse').optional(),\n    headers: z.record(z.string(), z.string()).optional(),\n    url: z\n        .string()\n        .transform(function (val) { return extractEnvVariable(val); })\n        .pipe(z.string().url())\n        .refine(function (val) {\n        var protocol = new URL(val).protocol;\n        return protocol !== 'ws:' && protocol !== 'wss:';\n    }, {\n        message: 'SSE URL must not start with ws:// or wss://',\n    }),\n});\nexport var StreamableHTTPOptionsSchema = BaseOptionsSchema.extend({\n    type: z.literal('streamable-http'),\n    headers: z.record(z.string(), z.string()).optional(),\n    url: z\n        .string()\n        .transform(function (val) { return extractEnvVariable(val); })\n        .pipe(z.string().url())\n        .refine(function (val) {\n        var protocol = new URL(val).protocol;\n        return protocol !== 'ws:' && protocol !== 'wss:';\n    }, {\n        message: 'Streamable HTTP URL must not start with ws:// or wss://',\n    }),\n});\nexport var MCPOptionsSchema = z.union([\n    StdioOptionsSchema,\n    WebSocketOptionsSchema,\n    SSEOptionsSchema,\n    StreamableHTTPOptionsSchema,\n]);\nexport var MCPServersSchema = z.record(z.string(), MCPOptionsSchema);\n//# sourceMappingURL=mcp.js.map","references":["/Users/fairytale/Desktop/interview_projects_2025/LibreChat/node_modules/zod/dist/types/index.d.ts","/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/src/types/agents.ts","/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/src/utils.ts"],"map":"{\"version\":3,\"file\":\"mcp.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/mcp.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/dist/types/mcp.d.ts","writeByteOrderMark":false,"text":"import { z } from 'zod';\nimport { TokenExchangeMethodEnum } from './types/agents';\nexport declare const StdioOptionsSchema: z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodOptional<z.ZodLiteral<\"stdio\">>;\n    /**\n     * The executable to run to start the server.\n     */\n    command: z.ZodString;\n    /**\n     * Command line arguments to pass to the executable.\n     */\n    args: z.ZodArray<z.ZodString, \"many\">;\n    /**\n     * The environment to use when spawning the process.\n     *\n     * If not specified, the result of getDefaultEnvironment() will be used.\n     * Environment variables can be referenced using ${VAR_NAME} syntax.\n     */\n    env: z.ZodEffects<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>, Record<string, string> | undefined, Record<string, string> | undefined>;\n    /**\n     * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n     *\n     * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n     *\n     * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n     */\n    stderr: z.ZodOptional<z.ZodAny>;\n}, \"strip\", z.ZodTypeAny, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"stdio\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"stdio\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}>;\nexport declare const WebSocketOptionsSchema: z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodOptional<z.ZodLiteral<\"websocket\">>;\n    url: z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, string, string>;\n}, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"websocket\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"websocket\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n}>;\nexport declare const SSEOptionsSchema: z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodOptional<z.ZodLiteral<\"sse\">>;\n    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;\n    url: z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, string, string>;\n}, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"sse\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"sse\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}>;\nexport declare const StreamableHTTPOptionsSchema: z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodLiteral<\"streamable-http\">;\n    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;\n    url: z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, string, string>;\n}, \"strip\", z.ZodTypeAny, {\n    type: \"streamable-http\";\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}, {\n    type: \"streamable-http\";\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}>;\nexport declare const MCPOptionsSchema: z.ZodUnion<[z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodOptional<z.ZodLiteral<\"stdio\">>;\n    /**\n     * The executable to run to start the server.\n     */\n    command: z.ZodString;\n    /**\n     * Command line arguments to pass to the executable.\n     */\n    args: z.ZodArray<z.ZodString, \"many\">;\n    /**\n     * The environment to use when spawning the process.\n     *\n     * If not specified, the result of getDefaultEnvironment() will be used.\n     * Environment variables can be referenced using ${VAR_NAME} syntax.\n     */\n    env: z.ZodEffects<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>, Record<string, string> | undefined, Record<string, string> | undefined>;\n    /**\n     * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n     *\n     * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n     *\n     * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n     */\n    stderr: z.ZodOptional<z.ZodAny>;\n}, \"strip\", z.ZodTypeAny, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"stdio\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"stdio\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}>, z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodOptional<z.ZodLiteral<\"websocket\">>;\n    url: z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, string, string>;\n}, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"websocket\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"websocket\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n}>, z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodOptional<z.ZodLiteral<\"sse\">>;\n    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;\n    url: z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, string, string>;\n}, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"sse\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"sse\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}>, z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodLiteral<\"streamable-http\">;\n    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;\n    url: z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, string, string>;\n}, \"strip\", z.ZodTypeAny, {\n    type: \"streamable-http\";\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}, {\n    type: \"streamable-http\";\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}>]>;\nexport declare const MCPServersSchema: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodOptional<z.ZodLiteral<\"stdio\">>;\n    /**\n     * The executable to run to start the server.\n     */\n    command: z.ZodString;\n    /**\n     * Command line arguments to pass to the executable.\n     */\n    args: z.ZodArray<z.ZodString, \"many\">;\n    /**\n     * The environment to use when spawning the process.\n     *\n     * If not specified, the result of getDefaultEnvironment() will be used.\n     * Environment variables can be referenced using ${VAR_NAME} syntax.\n     */\n    env: z.ZodEffects<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>, Record<string, string> | undefined, Record<string, string> | undefined>;\n    /**\n     * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n     *\n     * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n     *\n     * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n     */\n    stderr: z.ZodOptional<z.ZodAny>;\n}, \"strip\", z.ZodTypeAny, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"stdio\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"stdio\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}>, z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodOptional<z.ZodLiteral<\"websocket\">>;\n    url: z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, string, string>;\n}, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"websocket\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"websocket\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n}>, z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodOptional<z.ZodLiteral<\"sse\">>;\n    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;\n    url: z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, string, string>;\n}, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"sse\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    type?: \"sse\" | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}>, z.ZodObject<{\n    iconPath: z.ZodOptional<z.ZodString>;\n    timeout: z.ZodOptional<z.ZodNumber>;\n    initTimeout: z.ZodOptional<z.ZodNumber>;\n    /** Controls visibility in chat dropdown menu (MCPSelect) */\n    chatMenu: z.ZodOptional<z.ZodBoolean>;\n    /**\n     * Controls server instruction behavior:\n     * - undefined/not set: No instructions included (default)\n     * - true: Use server-provided instructions\n     * - string: Use custom instructions (overrides server-provided)\n     */\n    serverInstructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;\n    /**\n     * OAuth configuration for SSE and Streamable HTTP transports\n     * - Optional: OAuth can be auto-discovered on 401 responses\n     * - Pre-configured values will skip discovery steps\n     */\n    oauth: z.ZodOptional<z.ZodObject<{\n        /** OAuth authorization endpoint (optional - can be auto-discovered) */\n        authorization_url: z.ZodOptional<z.ZodString>;\n        /** OAuth token endpoint (optional - can be auto-discovered) */\n        token_url: z.ZodOptional<z.ZodString>;\n        /** OAuth client ID (optional - can use dynamic registration) */\n        client_id: z.ZodOptional<z.ZodString>;\n        /** OAuth client secret (optional - can use dynamic registration) */\n        client_secret: z.ZodOptional<z.ZodString>;\n        /** OAuth scopes to request */\n        scope: z.ZodOptional<z.ZodString>;\n        /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n        redirect_uri: z.ZodOptional<z.ZodString>;\n        /** Token exchange method */\n        token_exchange_method: z.ZodOptional<z.ZodNativeEnum<typeof TokenExchangeMethodEnum>>;\n    }, \"strip\", z.ZodTypeAny, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }, {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    }>>;\n    customUserVars: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{\n        title: z.ZodString;\n        description: z.ZodString;\n    }, \"strip\", z.ZodTypeAny, {\n        title: string;\n        description: string;\n    }, {\n        title: string;\n        description: string;\n    }>>>;\n} & {\n    type: z.ZodLiteral<\"streamable-http\">;\n    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;\n    url: z.ZodEffects<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodString>, string, string>;\n}, \"strip\", z.ZodTypeAny, {\n    type: \"streamable-http\";\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}, {\n    type: \"streamable-http\";\n    url: string;\n    iconPath?: string | undefined;\n    timeout?: number | undefined;\n    initTimeout?: number | undefined;\n    chatMenu?: boolean | undefined;\n    serverInstructions?: string | boolean | undefined;\n    oauth?: {\n        authorization_url?: string | undefined;\n        token_url?: string | undefined;\n        client_id?: string | undefined;\n        client_secret?: string | undefined;\n        scope?: string | undefined;\n        redirect_uri?: string | undefined;\n        token_exchange_method?: TokenExchangeMethodEnum | undefined;\n    } | undefined;\n    customUserVars?: Record<string, {\n        title: string;\n        description: string;\n    }> | undefined;\n    headers?: Record<string, string> | undefined;\n}>]>>;\nexport type MCPOptions = z.infer<typeof MCPOptionsSchema>;\n"}}
