{"code":"export var envVarRegex = /^\\${(.+)}$/;\n/** Extracts the environment variable name from a template literal string */\nexport function extractVariableName(value) {\n    if (!value) {\n        return null;\n    }\n    var match = value.trim().match(envVarRegex);\n    return match ? match[1] : null;\n}\n/** Extracts the value of an environment variable from a string. */\nexport function extractEnvVariable(value) {\n    if (!value) {\n        return value;\n    }\n    // Trim the input\n    var trimmed = value.trim();\n    // Special case: if it's just a single environment variable\n    var singleMatch = trimmed.match(envVarRegex);\n    if (singleMatch) {\n        var varName = singleMatch[1];\n        return process.env[varName] || trimmed;\n    }\n    // For multiple variables, process them using a regex loop\n    var regex = /\\${([^}]+)}/g;\n    var result = trimmed;\n    // First collect all matches and their positions\n    var matches = [];\n    var match;\n    while ((match = regex.exec(trimmed)) !== null) {\n        matches.push({\n            fullMatch: match[0],\n            varName: match[1],\n            index: match.index,\n        });\n    }\n    // Process matches in reverse order to avoid position shifts\n    for (var i = matches.length - 1; i >= 0; i--) {\n        var _a = matches[i], fullMatch = _a.fullMatch, varName = _a.varName, index = _a.index;\n        var envValue = process.env[varName] || fullMatch;\n        // Replace at exact position\n        result = result.substring(0, index) + envValue + result.substring(index + fullMatch.length);\n    }\n    return result;\n}\n//# sourceMappingURL=utils.js.map","references":[],"map":"{\"version\":3,\"file\":\"utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/utils.ts\"],\"names\":[],\"mappings\":\"AAAA,MAAM,CAAC,IAAM,WAAW,GAAG,YAAY,CAAC;AAExC,4EAA4E;AAC5E,MAAM,UAAU,mBAAmB,CAAC,KAAa;IAC/C,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAM,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC9C,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AACjC,CAAC;AAED,mEAAmE;AACnE,MAAM,UAAU,kBAAkB,CAAC,KAAa;IAC9C,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,KAAK,CAAC;IACf,CAAC;IAED,iBAAiB;IACjB,IAAM,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;IAE7B,2DAA2D;IAC3D,IAAM,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC/C,IAAI,WAAW,EAAE,CAAC;QAChB,IAAM,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QAC/B,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC;IACzC,CAAC;IAED,0DAA0D;IAC1D,IAAM,KAAK,GAAG,cAAc,CAAC;IAC7B,IAAI,MAAM,GAAG,OAAO,CAAC;IAErB,gDAAgD;IAChD,IAAM,OAAO,GAAG,EAAE,CAAC;IACnB,IAAI,KAAK,CAAC;IACV,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;QAC9C,OAAO,CAAC,IAAI,CAAC;YACX,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;YACnB,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YACjB,KAAK,EAAE,KAAK,CAAC,KAAK;SACnB,CAAC,CAAC;IACL,CAAC;IAED,4DAA4D;IAC5D,KAAK,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QACvC,IAAA,KAAgC,OAAO,CAAC,CAAC,CAAC,EAAxC,SAAS,eAAA,EAAE,OAAO,aAAA,EAAE,KAAK,WAAe,CAAC;QACjD,IAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC;QAEnD,4BAA4B;QAC5B,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IAC9F,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC\"}","dts":{"name":"/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/dist/types/utils.d.ts","writeByteOrderMark":false,"text":"export declare const envVarRegex: RegExp;\n/** Extracts the environment variable name from a template literal string */\nexport declare function extractVariableName(value: string): string | null;\n/** Extracts the value of an environment variable from a string. */\nexport declare function extractEnvVariable(value: string): string;\n"}}
