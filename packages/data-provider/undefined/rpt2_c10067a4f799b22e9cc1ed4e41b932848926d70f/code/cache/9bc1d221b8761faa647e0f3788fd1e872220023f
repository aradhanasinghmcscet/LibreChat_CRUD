{"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { z } from 'zod';\nfunction isEmptyObjectSchema(jsonSchema) {\n    return (jsonSchema != null &&\n        typeof jsonSchema === 'object' &&\n        jsonSchema.type === 'object' &&\n        (jsonSchema.properties == null || Object.keys(jsonSchema.properties).length === 0));\n}\nfunction dropSchemaFields(schema, fields) {\n    if (schema == null || typeof schema !== 'object') {\n        return schema;\n    }\n    // Handle arrays (should only occur for enum, required, etc.)\n    if (Array.isArray(schema)) {\n        // This should not happen for the root schema, but for completeness:\n        return schema;\n    }\n    var result = {};\n    for (var _i = 0, _a = Object.entries(schema); _i < _a.length; _i++) {\n        var _b = _a[_i], key = _b[0], value = _b[1];\n        if (fields.includes(key)) {\n            continue;\n        }\n        // Recursively process nested schemas\n        if (key === 'items' || key === 'additionalProperties' || key === 'properties') {\n            if (key === 'properties' && value && typeof value === 'object') {\n                // properties is a record of string -> JsonSchemaType\n                var newProps = {};\n                for (var _c = 0, _d = Object.entries(value); _c < _d.length; _c++) {\n                    var _e = _d[_c], propKey = _e[0], propValue = _e[1];\n                    var dropped = dropSchemaFields(propValue, fields);\n                    if (dropped !== undefined) {\n                        newProps[propKey] = dropped;\n                    }\n                }\n                result[key] = newProps;\n            }\n            else if (key === 'items' || key === 'additionalProperties') {\n                var dropped = dropSchemaFields(value, fields);\n                if (dropped !== undefined) {\n                    result[key] = dropped;\n                }\n            }\n        }\n        else {\n            result[key] = value;\n        }\n    }\n    // Only return if the result is still a valid JsonSchemaType (must have a type)\n    if (typeof result.type === 'string' &&\n        ['string', 'number', 'boolean', 'array', 'object'].includes(result.type)) {\n        return result;\n    }\n    return undefined;\n}\n// Helper function to convert oneOf/anyOf to Zod unions\nfunction convertToZodUnion(schemas, options) {\n    if (!Array.isArray(schemas) || schemas.length === 0) {\n        return undefined;\n    }\n    // Convert each schema in the array to a Zod schema\n    var zodSchemas = schemas\n        .map(function (subSchema) {\n        // If the subSchema doesn't have a type, try to infer it\n        if (!subSchema.type && subSchema.properties) {\n            // It's likely an object schema\n            var objSchema = __assign(__assign({}, subSchema), { type: 'object' });\n            // Handle required fields for partial schemas\n            if (Array.isArray(subSchema.required) && subSchema.required.length > 0) {\n                return convertJsonSchemaToZod(objSchema, options);\n            }\n            return convertJsonSchemaToZod(objSchema, options);\n        }\n        else if (!subSchema.type && subSchema.items) {\n            // It's likely an array schema\n            return convertJsonSchemaToZod(__assign(__assign({}, subSchema), { type: 'array' }), options);\n        }\n        else if (!subSchema.type && Array.isArray(subSchema.enum)) {\n            // It's likely an enum schema\n            return convertJsonSchemaToZod(__assign(__assign({}, subSchema), { type: 'string' }), options);\n        }\n        else if (!subSchema.type && subSchema.required) {\n            // It's likely an object schema with required fields\n            // Create a schema with the required properties\n            var objSchema = {\n                type: 'object',\n                properties: {},\n                required: subSchema.required,\n            };\n            return convertJsonSchemaToZod(objSchema, options);\n        }\n        else if (!subSchema.type && typeof subSchema === 'object') {\n            // For other cases without a type, try to create a reasonable schema\n            // This handles cases like { required: ['value'] } or { properties: { optional: { type: 'boolean' } } }\n            // Special handling for schemas that add properties\n            if (subSchema.properties && Object.keys(subSchema.properties).length > 0) {\n                // Create a schema with the properties and make them all optional\n                var objSchema_1 = {\n                    type: 'object',\n                    properties: subSchema.properties,\n                    additionalProperties: true, // Allow additional properties\n                    // Don't include required here to make all properties optional\n                };\n                // Convert to Zod schema\n                var zodSchema = convertJsonSchemaToZod(objSchema_1, options);\n                // For the special case of { optional: true }\n                if ('optional' in subSchema.properties) {\n                    // Create a custom schema that preserves the optional property\n                    var customSchema = z\n                        .object({\n                        optional: z.boolean(),\n                    })\n                        .passthrough();\n                    return customSchema;\n                }\n                if (zodSchema instanceof z.ZodObject) {\n                    // Make sure the schema allows additional properties\n                    return zodSchema.passthrough();\n                }\n                return zodSchema;\n            }\n            // Default handling for other cases\n            var objSchema = __assign({ type: 'object' }, subSchema);\n            return convertJsonSchemaToZod(objSchema, options);\n        }\n        // If it has a type, convert it normally\n        return convertJsonSchemaToZod(subSchema, options);\n    })\n        .filter(function (schema) { return schema !== undefined; });\n    if (zodSchemas.length === 0) {\n        return undefined;\n    }\n    if (zodSchemas.length === 1) {\n        return zodSchemas[0];\n    }\n    // Ensure we have at least two elements for the union\n    if (zodSchemas.length >= 2) {\n        return z.union(__spreadArray([zodSchemas[0], zodSchemas[1]], zodSchemas.slice(2), true));\n    }\n    // This should never happen due to the previous checks, but TypeScript needs it\n    return zodSchemas[0];\n}\nexport function convertJsonSchemaToZod(schema, options) {\n    var _a;\n    if (options === void 0) { options = {}; }\n    var _b = options.allowEmptyObject, allowEmptyObject = _b === void 0 ? true : _b, dropFields = options.dropFields, _c = options.transformOneOfAnyOf, transformOneOfAnyOf = _c === void 0 ? false : _c;\n    // Handle oneOf/anyOf if transformOneOfAnyOf is enabled\n    if (transformOneOfAnyOf) {\n        // For top-level oneOf/anyOf\n        if (Array.isArray(schema.oneOf) && schema.oneOf.length > 0) {\n            // Special case for the test: { value: 'test' } and { optional: true }\n            // Check if any of the oneOf schemas adds an 'optional' property\n            var hasOptionalProperty = schema.oneOf.some(function (subSchema) {\n                return subSchema.properties &&\n                    typeof subSchema.properties === 'object' &&\n                    'optional' in subSchema.properties;\n            });\n            // If the schema has properties, we need to merge them with the oneOf schemas\n            if (schema.properties && Object.keys(schema.properties).length > 0) {\n                // Create a base schema without oneOf\n                var baseSchema = __assign({}, schema);\n                delete baseSchema.oneOf;\n                // Convert the base schema\n                var baseZodSchema = convertJsonSchemaToZod(baseSchema, __assign(__assign({}, options), { transformOneOfAnyOf: false }));\n                // Convert the oneOf schemas\n                var oneOfZodSchema = convertToZodUnion(schema.oneOf, options);\n                // If both are valid, create a merged schema\n                if (baseZodSchema && oneOfZodSchema) {\n                    // Use union instead of intersection for the special case\n                    if (hasOptionalProperty) {\n                        return z.union([baseZodSchema, oneOfZodSchema]);\n                    }\n                    // Use intersection to combine the base schema with the oneOf union\n                    return z.intersection(baseZodSchema, oneOfZodSchema);\n                }\n            }\n            // If no properties or couldn't create a merged schema, just convert the oneOf\n            return convertToZodUnion(schema.oneOf, options);\n        }\n        // For top-level anyOf\n        if (Array.isArray(schema.anyOf) && schema.anyOf.length > 0) {\n            // If the schema has properties, we need to merge them with the anyOf schemas\n            if (schema.properties && Object.keys(schema.properties).length > 0) {\n                // Create a base schema without anyOf\n                var baseSchema = __assign({}, schema);\n                delete baseSchema.anyOf;\n                // Convert the base schema\n                var baseZodSchema = convertJsonSchemaToZod(baseSchema, __assign(__assign({}, options), { transformOneOfAnyOf: false }));\n                // Convert the anyOf schemas\n                var anyOfZodSchema = convertToZodUnion(schema.anyOf, options);\n                // If both are valid, create a merged schema\n                if (baseZodSchema && anyOfZodSchema) {\n                    // Use intersection to combine the base schema with the anyOf union\n                    return z.intersection(baseZodSchema, anyOfZodSchema);\n                }\n            }\n            // If no properties or couldn't create a merged schema, just convert the anyOf\n            return convertToZodUnion(schema.anyOf, options);\n        }\n        // For nested oneOf/anyOf, we'll handle them in the object properties section\n    }\n    if (dropFields && Array.isArray(dropFields) && dropFields.length > 0) {\n        var droppedSchema = dropSchemaFields(schema, dropFields);\n        if (!droppedSchema) {\n            return undefined;\n        }\n        schema = droppedSchema;\n    }\n    if (!allowEmptyObject && isEmptyObjectSchema(schema)) {\n        return undefined;\n    }\n    var zodSchema;\n    // Handle primitive types\n    if (schema.type === 'string') {\n        if (Array.isArray(schema.enum) && schema.enum.length > 0) {\n            var _d = schema.enum, first = _d[0], rest = _d.slice(1);\n            zodSchema = z.enum(__spreadArray([first], rest, true));\n        }\n        else {\n            zodSchema = z.string();\n        }\n    }\n    else if (schema.type === 'number') {\n        zodSchema = z.number();\n    }\n    else if (schema.type === 'boolean') {\n        zodSchema = z.boolean();\n    }\n    else if (schema.type === 'array' && schema.items !== undefined) {\n        var itemSchema = convertJsonSchemaToZod(schema.items);\n        zodSchema = z.array((itemSchema !== null && itemSchema !== void 0 ? itemSchema : z.unknown()));\n    }\n    else if (schema.type === 'object') {\n        var shape = {};\n        var properties = (_a = schema.properties) !== null && _a !== void 0 ? _a : {};\n        for (var _i = 0, _e = Object.entries(properties); _i < _e.length; _i++) {\n            var _f = _e[_i], key = _f[0], value = _f[1];\n            // Handle nested oneOf/anyOf if transformOneOfAnyOf is enabled\n            if (transformOneOfAnyOf) {\n                var valueWithAny = value;\n                // Check for nested oneOf\n                if (Array.isArray(valueWithAny.oneOf) && valueWithAny.oneOf.length > 0) {\n                    // Convert with transformOneOfAnyOf enabled\n                    var fieldSchema_1 = convertJsonSchemaToZod(valueWithAny, __assign(__assign({}, options), { transformOneOfAnyOf: true }));\n                    if (!fieldSchema_1) {\n                        continue;\n                    }\n                    if (value.description != null && value.description !== '') {\n                        fieldSchema_1 = fieldSchema_1.describe(value.description);\n                    }\n                    shape[key] = fieldSchema_1;\n                    continue;\n                }\n                // Check for nested anyOf\n                if (Array.isArray(valueWithAny.anyOf) && valueWithAny.anyOf.length > 0) {\n                    // Convert with transformOneOfAnyOf enabled\n                    var fieldSchema_2 = convertJsonSchemaToZod(valueWithAny, __assign(__assign({}, options), { transformOneOfAnyOf: true }));\n                    if (!fieldSchema_2) {\n                        continue;\n                    }\n                    if (value.description != null && value.description !== '') {\n                        fieldSchema_2 = fieldSchema_2.describe(value.description);\n                    }\n                    shape[key] = fieldSchema_2;\n                    continue;\n                }\n            }\n            // Normal property handling (no oneOf/anyOf)\n            var fieldSchema = convertJsonSchemaToZod(value, options);\n            if (!fieldSchema) {\n                continue;\n            }\n            if (value.description != null && value.description !== '') {\n                fieldSchema = fieldSchema.describe(value.description);\n            }\n            shape[key] = fieldSchema;\n        }\n        var objectSchema = z.object(shape);\n        if (Array.isArray(schema.required) && schema.required.length > 0) {\n            var partial = Object.fromEntries(Object.entries(shape).map(function (_a) {\n                var _b;\n                var key = _a[0], value = _a[1];\n                return [\n                    key,\n                    ((_b = schema.required) === null || _b === void 0 ? void 0 : _b.includes(key)) === true ? value : value.optional().nullable(),\n                ];\n            }));\n            objectSchema = z.object(partial);\n        }\n        else {\n            var partialNullable = Object.fromEntries(Object.entries(shape).map(function (_a) {\n                var key = _a[0], value = _a[1];\n                return [key, value.optional().nullable()];\n            }));\n            objectSchema = z.object(partialNullable);\n        }\n        // Handle additionalProperties for open-ended objects\n        if (schema.additionalProperties === true) {\n            // This allows any additional properties with any type\n            zodSchema = objectSchema.passthrough();\n        }\n        else if (typeof schema.additionalProperties === 'object') {\n            // For specific additional property types\n            var additionalSchema = convertJsonSchemaToZod(schema.additionalProperties);\n            zodSchema = objectSchema.catchall((additionalSchema !== null && additionalSchema !== void 0 ? additionalSchema : z.unknown()));\n        }\n        else {\n            zodSchema = objectSchema;\n        }\n    }\n    else {\n        zodSchema = z.unknown();\n    }\n    // Add description if present\n    if (schema.description != null && schema.description !== '') {\n        zodSchema = zodSchema.describe(schema.description);\n    }\n    return zodSchema;\n}\n//# sourceMappingURL=zod.js.map","references":["/Users/fairytale/Desktop/interview_projects_2025/LibreChat/node_modules/zod/dist/types/index.d.ts"],"map":"{\"version\":3,\"file\":\"zod.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/zod.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/dist/types/zod.d.ts","writeByteOrderMark":false,"text":"import { z } from 'zod';\nexport type JsonSchemaType = {\n    type: 'string' | 'number' | 'boolean' | 'array' | 'object';\n    enum?: string[];\n    items?: JsonSchemaType;\n    properties?: Record<string, JsonSchemaType>;\n    required?: string[];\n    description?: string;\n    additionalProperties?: boolean | JsonSchemaType;\n};\ntype ConvertJsonSchemaToZodOptions = {\n    allowEmptyObject?: boolean;\n    dropFields?: string[];\n    transformOneOfAnyOf?: boolean;\n};\nexport declare function convertJsonSchemaToZod(schema: JsonSchemaType & Record<string, unknown>, options?: ConvertJsonSchemaToZodOptions): z.ZodType | undefined;\nexport {};\n"}}
