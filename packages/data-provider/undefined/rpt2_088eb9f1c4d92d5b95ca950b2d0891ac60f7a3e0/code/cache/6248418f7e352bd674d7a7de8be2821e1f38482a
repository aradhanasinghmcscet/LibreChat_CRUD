{"code":"export var DATE_RANGE;\n(function (DATE_RANGE) {\n    DATE_RANGE[\"PAST_HOUR\"] = \"h\";\n    DATE_RANGE[\"PAST_24_HOURS\"] = \"d\";\n    DATE_RANGE[\"PAST_WEEK\"] = \"w\";\n    DATE_RANGE[\"PAST_MONTH\"] = \"m\";\n    DATE_RANGE[\"PAST_YEAR\"] = \"y\";\n})(DATE_RANGE || (DATE_RANGE = {}));\n//# sourceMappingURL=web.js.map","references":["/Users/fairytale/Desktop/interview_projects_2025/LibreChat/node_modules/winston/index.d.ts","/Users/fairytale/Desktop/interview_projects_2025/LibreChat/node_modules/@langchain/core/runnables.d.ts"],"map":"{\"version\":3,\"file\":\"web.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/types/web.ts\"],\"names\":[],\"mappings\":\"AAKA,MAAM,CAAN,IAAY,UAMX;AAND,WAAY,UAAU;IACpB,6BAAe,CAAA;IACf,iCAAmB,CAAA;IACnB,6BAAe,CAAA;IACf,8BAAgB,CAAA;IAChB,6BAAe,CAAA;AACjB,CAAC,EANW,UAAU,KAAV,UAAU,QAMrB\"}","dts":{"name":"/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/dist/types/types/web.d.ts","writeByteOrderMark":false,"text":"import type { Logger as WinstonLogger } from 'winston';\nimport type { RunnableConfig } from '@langchain/core/runnables';\nexport type SearchRefType = 'search' | 'image' | 'news' | 'video' | 'ref';\nexport declare enum DATE_RANGE {\n    PAST_HOUR = \"h\",\n    PAST_24_HOURS = \"d\",\n    PAST_WEEK = \"w\",\n    PAST_MONTH = \"m\",\n    PAST_YEAR = \"y\"\n}\nexport type SearchProvider = 'serper' | 'searxng';\nexport type RerankerType = 'infinity' | 'jina' | 'cohere' | 'none';\nexport interface Highlight {\n    score: number;\n    text: string;\n    references?: UsedReferences;\n}\nexport type ProcessedSource = {\n    content?: string;\n    attribution?: string;\n    references?: References;\n    highlights?: Highlight[];\n    processed?: boolean;\n};\nexport type ProcessedOrganic = OrganicResult & ProcessedSource;\nexport type ProcessedTopStory = TopStoryResult & ProcessedSource;\nexport type ValidSource = ProcessedOrganic | ProcessedTopStory;\nexport type ResultReference = {\n    link: string;\n    type: 'link' | 'image' | 'video';\n    title?: string;\n    attribution?: string;\n};\nexport interface SearchResultData {\n    turn?: number;\n    organic?: ProcessedOrganic[];\n    topStories?: ProcessedTopStory[];\n    images?: ImageResult[];\n    videos?: VideoResult[];\n    places?: PlaceResult[];\n    news?: NewsResult[];\n    shopping?: ShoppingResult[];\n    knowledgeGraph?: KnowledgeGraphResult;\n    answerBox?: AnswerBoxResult;\n    peopleAlsoAsk?: PeopleAlsoAskResult[];\n    relatedSearches?: Array<{\n        query: string;\n    }>;\n    references?: ResultReference[];\n    error?: string;\n}\nexport interface SearchResult {\n    data?: SearchResultData;\n    error?: string;\n    success: boolean;\n}\nexport interface Source {\n    link: string;\n    html?: string;\n    title?: string;\n    snippet?: string;\n    date?: string;\n}\nexport interface SearchConfig {\n    searchProvider?: SearchProvider;\n    serperApiKey?: string;\n    searxngInstanceUrl?: string;\n    searxngApiKey?: string;\n}\nexport type References = {\n    links: MediaReference[];\n    images: MediaReference[];\n    videos: MediaReference[];\n};\nexport interface ScrapeResult {\n    url: string;\n    error?: boolean;\n    content: string;\n    attribution?: string;\n    references?: References;\n    highlights?: Highlight[];\n}\nexport interface ProcessSourcesConfig {\n    topResults?: number;\n    strategies?: string[];\n    filterContent?: boolean;\n    reranker?: unknown;\n    logger?: Logger;\n}\nexport interface FirecrawlConfig {\n    firecrawlApiKey?: string;\n    firecrawlApiUrl?: string;\n    firecrawlFormats?: string[];\n}\nexport interface ScraperContentResult {\n    content: string;\n}\nexport interface ScraperExtractionResult {\n    no_extraction: ScraperContentResult;\n}\nexport interface JinaRerankerResult {\n    index: number;\n    relevance_score: number;\n    document?: string | {\n        text: string;\n    };\n}\nexport interface JinaRerankerResponse {\n    model: string;\n    usage: {\n        total_tokens: number;\n    };\n    results: JinaRerankerResult[];\n}\nexport interface CohereRerankerResult {\n    index: number;\n    relevance_score: number;\n}\nexport interface CohereRerankerResponse {\n    results: CohereRerankerResult[];\n    id: string;\n    meta: {\n        api_version: {\n            version: string;\n            is_experimental: boolean;\n        };\n        billed_units: {\n            search_units: number;\n        };\n    };\n}\nexport type SafeSearchLevel = 0 | 1 | 2;\nexport type Logger = WinstonLogger;\nexport interface SearchToolConfig extends SearchConfig, ProcessSourcesConfig, FirecrawlConfig {\n    logger?: Logger;\n    safeSearch?: SafeSearchLevel;\n    jinaApiKey?: string;\n    cohereApiKey?: string;\n    rerankerType?: RerankerType;\n    onSearchResults?: (results: SearchResult, runnableConfig?: RunnableConfig) => void;\n    onGetHighlights?: (link: string) => void;\n}\nexport interface MediaReference {\n    originalUrl: string;\n    title?: string;\n    text?: string;\n}\nexport type UsedReferences = {\n    type: 'link' | 'image' | 'video';\n    originalIndex: number;\n    reference: MediaReference;\n}[];\n/** Firecrawl */\nexport interface FirecrawlScrapeOptions {\n    formats?: string[];\n    includeTags?: string[];\n    excludeTags?: string[];\n    headers?: Record<string, string>;\n    waitFor?: number;\n    timeout?: number;\n}\nexport interface ScrapeMetadata {\n    sourceURL?: string;\n    url?: string;\n    scrapeId?: string;\n    statusCode?: number;\n    title?: string;\n    description?: string;\n    language?: string;\n    favicon?: string;\n    viewport?: string;\n    robots?: string;\n    'theme-color'?: string;\n    'og:url'?: string;\n    'og:title'?: string;\n    'og:description'?: string;\n    'og:type'?: string;\n    'og:image'?: string;\n    'og:image:width'?: string;\n    'og:image:height'?: string;\n    'og:site_name'?: string;\n    ogUrl?: string;\n    ogTitle?: string;\n    ogDescription?: string;\n    ogImage?: string;\n    ogSiteName?: string;\n    'article:author'?: string;\n    'article:published_time'?: string;\n    'article:modified_time'?: string;\n    'article:section'?: string;\n    'article:tag'?: string;\n    'article:publisher'?: string;\n    publishedTime?: string;\n    modifiedTime?: string;\n    'twitter:site'?: string | boolean | number | null;\n    'twitter:creator'?: string;\n    'twitter:card'?: string;\n    'twitter:image'?: string;\n    'twitter:dnt'?: string;\n    'twitter:app:name:iphone'?: string;\n    'twitter:app:id:iphone'?: string;\n    'twitter:app:url:iphone'?: string;\n    'twitter:app:name:ipad'?: string;\n    'twitter:app:id:ipad'?: string;\n    'twitter:app:url:ipad'?: string;\n    'twitter:app:name:googleplay'?: string;\n    'twitter:app:id:googleplay'?: string;\n    'twitter:app:url:googleplay'?: string;\n    'fb:app_id'?: string;\n    'al:ios:url'?: string;\n    'al:ios:app_name'?: string;\n    'al:ios:app_store_id'?: string;\n    [key: string]: string | number | boolean | null | undefined;\n}\nexport interface FirecrawlScrapeResponse {\n    success: boolean;\n    data?: {\n        markdown?: string;\n        html?: string;\n        rawHtml?: string;\n        screenshot?: string;\n        links?: string[];\n        metadata?: ScrapeMetadata;\n    };\n    error?: string;\n}\nexport interface FirecrawlScraperConfig {\n    apiKey?: string;\n    apiUrl?: string;\n    formats?: string[];\n    timeout?: number;\n    logger?: Logger;\n}\nexport type GetSourcesParams = {\n    query: string;\n    date?: DATE_RANGE;\n    country?: string;\n    numResults?: number;\n    safeSearch?: SearchToolConfig['safeSearch'];\n    images?: boolean;\n    videos?: boolean;\n    news?: boolean;\n    type?: 'search' | 'images' | 'videos' | 'news';\n};\n/** Serper API */\nexport interface VideoResult {\n    title?: string;\n    link?: string;\n    snippet?: string;\n    imageUrl?: string;\n    duration?: string;\n    source?: string;\n    channel?: string;\n    date?: string;\n    position?: number;\n}\nexport interface PlaceResult {\n    position?: number;\n    name?: string;\n    address?: string;\n    latitude?: number;\n    longitude?: number;\n    rating?: number;\n    ratingCount?: number;\n    category?: string;\n    identifier?: string;\n}\nexport interface NewsResult {\n    title?: string;\n    link?: string;\n    snippet?: string;\n    date?: string;\n    source?: string;\n    imageUrl?: string;\n    position?: number;\n}\nexport interface ShoppingResult {\n    title?: string;\n    source?: string;\n    link?: string;\n    price?: string;\n    delivery?: string;\n    imageUrl?: string;\n    rating?: number;\n    ratingCount?: number;\n    offers?: string;\n    productId?: string;\n    position?: number;\n}\nexport interface ScholarResult {\n    title?: string;\n    link?: string;\n    publicationInfo?: string;\n    snippet?: string;\n    year?: number;\n    citedBy?: number;\n}\nexport interface ImageResult {\n    title?: string;\n    imageUrl?: string;\n    imageWidth?: number;\n    imageHeight?: number;\n    thumbnailUrl?: string;\n    thumbnailWidth?: number;\n    thumbnailHeight?: number;\n    source?: string;\n    domain?: string;\n    link?: string;\n    googleUrl?: string;\n    position?: number;\n}\nexport interface SerperSearchPayload extends SerperSearchInput {\n    /**\n     * Search type/vertical\n     * Options: \"search\" (web), \"images\", \"news\", \"places\", \"videos\"\n     */\n    type?: 'search' | 'images' | 'news' | 'places' | 'videos';\n    /**\n     * Starting index for search results pagination (used instead of page)\n     */\n    start?: number;\n    /**\n     * Filtering for safe search\n     * Options: \"off\", \"moderate\", \"active\"\n     */\n    safe?: 'off' | 'moderate' | 'active';\n}\nexport type SerperSearchParameters = Pick<SerperSearchPayload, 'q' | 'type'> & {\n    engine: 'google';\n};\nexport interface OrganicResult {\n    position?: number;\n    title?: string;\n    link: string;\n    snippet?: string;\n    date?: string;\n    sitelinks?: Array<{\n        title: string;\n        link: string;\n    }>;\n}\nexport interface TopStoryResult {\n    title?: string;\n    link: string;\n    source?: string;\n    date?: string;\n    imageUrl?: string;\n}\nexport interface KnowledgeGraphResult {\n    title?: string;\n    type?: string;\n    imageUrl?: string;\n    description?: string;\n    descriptionSource?: string;\n    descriptionLink?: string;\n    attributes?: Record<string, string>;\n    website?: string;\n}\nexport interface AnswerBoxResult {\n    title?: string;\n    snippet?: string;\n    snippetHighlighted?: string[];\n    link?: string;\n    date?: string;\n}\nexport interface PeopleAlsoAskResult {\n    question?: string;\n    snippet?: string;\n    title?: string;\n    link?: string;\n}\nexport type RelatedSearches = Array<{\n    query: string;\n}>;\nexport interface SerperSearchInput {\n    /**\n     * The search query string\n     */\n    q: string;\n    /**\n     * Country code for localized results\n     * Examples: \"us\", \"uk\", \"ca\", \"de\", etc.\n     */\n    gl?: string;\n    /**\n     * Interface language\n     * Examples: \"en\", \"fr\", \"de\", etc.\n     */\n    hl?: string;\n    /**\n     * Number of results to return (up to 100)\n     */\n    num?: number;\n    /**\n     * Specific location for contextual results\n     * Example: \"New York, NY\"\n     */\n    location?: string;\n    /**\n     * Search autocorrection setting\n     */\n    autocorrect?: boolean;\n    page?: number;\n    /**\n     * Date range for search results\n     * Options: \"h\" (past hour), \"d\" (past 24 hours), \"w\" (past week),\n     * \"m\" (past month), \"y\" (past year)\n     * `qdr:${DATE_RANGE}`\n     */\n    tbs?: string;\n}\nexport type SerperResultData = {\n    searchParameters: SerperSearchPayload;\n    organic?: OrganicResult[];\n    topStories?: TopStoryResult[];\n    images?: ImageResult[];\n    videos?: VideoResult[];\n    places?: PlaceResult[];\n    news?: NewsResult[];\n    shopping?: ShoppingResult[];\n    peopleAlsoAsk?: PeopleAlsoAskResult[];\n    relatedSearches?: RelatedSearches;\n    knowledgeGraph?: KnowledgeGraphResult;\n    answerBox?: AnswerBoxResult;\n    credits?: number;\n};\n/** SearXNG */\nexport interface SearxNGSearchPayload {\n    /**\n     * The search query string\n     * Supports syntax specific to different search engines\n     * Example: \"site:github.com SearXNG\"\n     */\n    q: string;\n    /**\n     * Comma-separated list of search categories\n     * Example: \"general,images,news\"\n     */\n    categories?: string;\n    /**\n     * Comma-separated list of search engines to use\n     * Example: \"google,bing,duckduckgo\"\n     */\n    engines?: string;\n    /**\n     * Code of the language for search results\n     * Example: \"en\", \"fr\", \"de\", \"es\"\n     */\n    language?: string;\n    /**\n     * Search page number\n     * Default: 1\n     */\n    pageno?: number;\n    /**\n     * Time range filter for search results\n     * Options: \"day\", \"month\", \"year\"\n     */\n    time_range?: 'day' | 'month' | 'year';\n    /**\n     * Output format of results\n     * Options: \"json\", \"csv\", \"rss\"\n     */\n    format?: 'json' | 'csv' | 'rss';\n    /**\n     * Open search results on new tab\n     * Options: `0` (off), `1` (on)\n     */\n    results_on_new_tab?: 0 | 1;\n    /**\n     * Proxy image results through SearxNG\n     * Options: true, false\n     */\n    image_proxy?: boolean;\n    /**\n     * Service for autocomplete suggestions\n     * Options: \"google\", \"dbpedia\", \"duckduckgo\", \"mwmbl\",\n     *          \"startpage\", \"wikipedia\", \"stract\", \"swisscows\", \"qwant\"\n     */\n    autocomplete?: string;\n    /**\n     * Safe search filtering level\n     * Options: \"0\" (off), \"1\" (moderate), \"2\" (strict)\n     */\n    safesearch?: 0 | 1 | 2;\n    /**\n     * Theme to use for results page\n     * Default: \"simple\" (other themes may be available per instance)\n     */\n    theme?: string;\n    /**\n     * List of enabled plugins\n     * Default: \"Hash_plugin,Self_Information,Tracker_URL_remover,Ahmia_blacklist\"\n     */\n    enabled_plugins?: string;\n    /**\n     * List of disabled plugins\n     */\n    disabled_plugins?: string;\n    /**\n     * List of enabled engines\n     */\n    enabled_engines?: string;\n    /**\n     * List of disabled engines\n     */\n    disabled_engines?: string;\n}\nexport interface SearXNGResult {\n    title?: string;\n    url?: string;\n    content?: string;\n    publishedDate?: string;\n    img_src?: string;\n}\nexport type ProcessSourcesFields = {\n    result: SearchResult;\n    numElements: number;\n    query: string;\n    news: boolean;\n    proMode: boolean;\n    onGetHighlights: SearchToolConfig['onGetHighlights'];\n};\n"}}
