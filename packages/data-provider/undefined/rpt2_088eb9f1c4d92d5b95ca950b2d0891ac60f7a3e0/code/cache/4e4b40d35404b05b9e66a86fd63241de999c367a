{"code":"export {};\n//# sourceMappingURL=queries.js.map","references":["/Users/fairytale/Desktop/interview_projects_2025/LibreChat/node_modules/@tanstack/react-query/build/lib/index.d.ts","/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/src/types/agents.ts","/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/src/schemas.ts","/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/src/types.ts"],"map":"{\"version\":3,\"file\":\"queries.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/types/queries.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/fairytale/Desktop/interview_projects_2025/LibreChat/packages/data-provider/dist/types/types/queries.d.ts","writeByteOrderMark":false,"text":"import type { InfiniteData } from '@tanstack/react-query';\nimport type * as a from '../types/agents';\nimport type * as s from '../schemas';\nimport type * as t from '../types';\nexport type Conversation = {\n    id: string;\n    createdAt: number;\n    participants: string[];\n    lastMessage: string;\n    conversations: s.TConversation[];\n};\nexport type ConversationListParams = {\n    cursor?: string;\n    isArchived?: boolean;\n    sortBy?: 'title' | 'createdAt' | 'updatedAt';\n    sortDirection?: 'asc' | 'desc';\n    tags?: string[];\n    search?: string;\n};\nexport type MinimalConversation = Pick<s.TConversation, 'conversationId' | 'endpoint' | 'title' | 'createdAt' | 'updatedAt' | 'user'>;\nexport type ConversationListResponse = {\n    conversations: MinimalConversation[];\n    nextCursor: string | null;\n};\nexport type ConversationData = InfiniteData<ConversationListResponse>;\nexport type ConversationUpdater = (data: ConversationData, conversation: s.TConversation) => ConversationData;\nexport type MessagesListParams = {\n    cursor?: string | null;\n    sortBy?: 'endpoint' | 'createdAt' | 'updatedAt';\n    sortDirection?: 'asc' | 'desc';\n    pageSize?: number;\n    conversationId?: string;\n    messageId?: string;\n    search?: string;\n};\nexport type MessagesListResponse = {\n    messages: s.TMessage[];\n    nextCursor: string | null;\n};\nexport type SharedMessagesResponse = Omit<s.TSharedLink, 'messages'> & {\n    messages: s.TMessage[];\n};\nexport interface SharedLinksListParams {\n    pageSize: number;\n    isPublic: boolean;\n    sortBy: 'title' | 'createdAt';\n    sortDirection: 'asc' | 'desc';\n    search?: string;\n    cursor?: string;\n}\nexport type SharedLinkItem = {\n    shareId: string;\n    title: string;\n    isPublic: boolean;\n    createdAt: Date;\n    conversationId: string;\n};\nexport interface SharedLinksResponse {\n    links: SharedLinkItem[];\n    nextCursor: string | null;\n    hasNextPage: boolean;\n}\nexport interface SharedLinkQueryData {\n    pages: SharedLinksResponse[];\n    pageParams: (string | null)[];\n}\nexport type AllPromptGroupsFilterRequest = {\n    category: string;\n    pageNumber: string;\n    pageSize: string | number;\n    before?: string | null;\n    after?: string | null;\n    order?: 'asc' | 'desc';\n    name?: string;\n    author?: string;\n};\nexport type AllPromptGroupsResponse = t.TPromptGroup[];\nexport type ConversationTagsResponse = s.TConversationTag[];\nexport type VerifyToolAuthParams = {\n    toolId: string;\n};\nexport type VerifyToolAuthResponse = {\n    authenticated: boolean;\n    message?: string | s.AuthType;\n    authTypes?: [string, s.AuthType][];\n};\nexport type GetToolCallParams = {\n    conversationId: string;\n};\nexport type ToolCallResults = a.ToolCallResult[];\nexport type TUserMemory = {\n    key: string;\n    value: string;\n    updated_at: string;\n    tokenCount?: number;\n};\nexport type MemoriesResponse = {\n    memories: TUserMemory[];\n    totalTokens: number;\n    tokenLimit: number | null;\n    usagePercentage: number | null;\n};\n"}}
